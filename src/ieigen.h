#include <eigen3/Eigen/Dense>namespace ieigen{	typedef Matrix< int, int, Eigen::Dynamic, Eigen::Dynamic> Matrix2i;	typedef Matrix< float, float, Eigen::Dynamic, Eigen::Dynamic> Matrix2f;	typedef Matrix< double, double, Eigen::Dynamic, Eigen::Dynamic> Matrix2d;	typedef Matrix< std::complex<float>, std::complex<float>, Eigen::Dynamic, Eigen::Dynamic> Matrix2cf;	typedef Matrix< std::complex<double>, std::complex<double>, Eigen::Dynamic, Eigen::Dynamic> Matrix2cd;	typedef Matrix< int, int, Eigen::Dynamic, Eigen::Dynamic> Matrix3i;	typedef Matrix< float, float, Eigen::Dynamic, Eigen::Dynamic> Matrix3f;	typedef Matrix< double, double, Eigen::Dynamic, Eigen::Dynamic> Matrix3d;	typedef Matrix< std::complex<float>, std::complex<float>, Eigen::Dynamic, Eigen::Dynamic> Matrix3cf;	typedef Matrix< std::complex<double>, std::complex<double>, Eigen::Dynamic, Eigen::Dynamic> Matrix3cd;	typedef Matrix< int, int, Eigen::Dynamic, Eigen::Dynamic> Matrix4i;	typedef Matrix< float, float, Eigen::Dynamic, Eigen::Dynamic> Matrix4f;	typedef Matrix< double, double, Eigen::Dynamic, Eigen::Dynamic> Matrix4d;	typedef Matrix< std::complex<float>, std::complex<float>, Eigen::Dynamic, Eigen::Dynamic> Matrix4cf;	typedef Matrix< std::complex<double>, std::complex<double>, Eigen::Dynamic, Eigen::Dynamic> Matrix4cd;	typedef Matrix< int, int, Eigen::Dynamic, Eigen::Dynamic> MatrixXi;	typedef Matrix< float, float, Eigen::Dynamic, Eigen::Dynamic> MatrixXf;	typedef Matrix< double, double, Eigen::Dynamic, Eigen::Dynamic> MatrixXd;	typedef Matrix< std::complex<float>, std::complex<float>, Eigen::Dynamic, Eigen::Dynamic> MatrixXcf;	typedef Matrix< std::complex<double>, std::complex<double>, Eigen::Dynamic, Eigen::Dynamic> MatrixXcd;	typedef Matrix< int, Eigen::Dynamic, 1> Vector2i;	typedef Matrix< float, Eigen::Dynamic, 1> Vector2f;	typedef Matrix< double, Eigen::Dynamic, 1> Vector2d;	typedef Matrix< std::complex<float>, Eigen::Dynamic, 1> Vector2cf;	typedef Matrix< std::complex<double>, Eigen::Dynamic, 1> Vector2cd;	typedef Matrix< int, Eigen::Dynamic, 1> Vector3i;	typedef Matrix< float, Eigen::Dynamic, 1> Vector3f;	typedef Matrix< double, Eigen::Dynamic, 1> Vector3d;	typedef Matrix< std::complex<float>, Eigen::Dynamic, 1> Vector3cf;	typedef Matrix< std::complex<double>, Eigen::Dynamic, 1> Vector3cd;	typedef Matrix< int, Eigen::Dynamic, 1> Vector4i;	typedef Matrix< float, Eigen::Dynamic, 1> Vector4f;	typedef Matrix< double, Eigen::Dynamic, 1> Vector4d;	typedef Matrix< std::complex<float>, Eigen::Dynamic, 1> Vector4cf;	typedef Matrix< std::complex<double>, Eigen::Dynamic, 1> Vector4cd;	typedef Matrix< int, Eigen::Dynamic, 1> VectorXi;	typedef Matrix< float, Eigen::Dynamic, 1> VectorXf;	typedef Matrix< double, Eigen::Dynamic, 1> VectorXd;	typedef Matrix< std::complex<float>, Eigen::Dynamic, 1> VectorXcf;	typedef Matrix< std::complex<double>, Eigen::Dynamic, 1> VectorXcd;	typedef Matrix< int, Eigen::Dynamic> RowVector2i;	typedef Matrix< float, Eigen::Dynamic> RowVector2f;	typedef Matrix< double, Eigen::Dynamic> RowVector2d;	typedef Matrix< std::complex<float>, Eigen::Dynamic> RowVector2cf;	typedef Matrix< std::complex<double>, Eigen::Dynamic> RowVector2cd;	typedef Matrix< int, Eigen::Dynamic> RowVector3i;	typedef Matrix< float, Eigen::Dynamic> RowVector3f;	typedef Matrix< double, Eigen::Dynamic> RowVector3d;	typedef Matrix< std::complex<float>, Eigen::Dynamic> RowVector3cf;	typedef Matrix< std::complex<double>, Eigen::Dynamic> RowVector3cd;	typedef Matrix< int, Eigen::Dynamic> RowVector4i;	typedef Matrix< float, Eigen::Dynamic> RowVector4f;	typedef Matrix< double, Eigen::Dynamic> RowVector4d;	typedef Matrix< std::complex<float>, Eigen::Dynamic> RowVector4cf;	typedef Matrix< std::complex<double>, Eigen::Dynamic> RowVector4cd;	typedef Matrix< int, Eigen::Dynamic> RowVectorXi;	typedef Matrix< float, Eigen::Dynamic> RowVectorXf;	typedef Matrix< double, Eigen::Dynamic> RowVectorXd;	typedef Matrix< std::complex<float>, Eigen::Dynamic> RowVectorXcf;	typedef Matrix< std::complex<double>, Eigen::Dynamic> RowVectorXcd;}
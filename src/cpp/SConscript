# -*-python-*-

SOLVER = ['partialPivLu',
          'fullPivLu',
          'householderQr',
          'colPivHouseholderQr',
          'fullPivHouseholderQr',
          'llt',
          'ldlt',
          'jacobiSvd']

SPARSE_SOLVER = ['simplicialLLT',
          'simplicialLDLT ',
          'sparseLU',
          'sparseQR',
          'conjugateGradient',
          'leastSquaresConjugateGradient',
          'biCGSTAB']

OBJ = ['Matrix', 'Vector', 'RowVector']

header = """\
#ifndef STATISKIT_LINALG_EIGEN_H
#define STATISKIT_LINALG_EIGEN_H

#include "config.h"

#include <stdexcept>
#include <vector>
#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace statiskit
{
    namespace linalg
    {
"""

with open('Eigen.h', 'w') as filehandler:
    filehandler.write(header)
    filehandler.write('\t\tenum solver_type {\n')
    for solver in SOLVER:
        filehandler.write('\t\t\t' + solver + ',\n')
    filehandler.write('\t\t};\n\n')
    filehandler.write('\t\tenum sparse_solver_type {\n')
    for solver in SPARSE_SOLVER:
        filehandler.write('\t\t\t' + solver + ',\n')
    filehandler.write('\t\t};\n\n')
    for obj in OBJ:
        typedef = ['double']
        if not obj == 'RowVector':
            filehandler.write('\t\ttypedef Eigen::Sparse' + obj + '< ' + ', '.join(typedef) + ' > Sparse' + obj + ';\n')
        # if obj == 'Matrix':
        #     for solver in SPARSE_SOLVER:
        #         solver = solver[0].upper() + solver[1:]
        #         solver = solver[:-1] + solver[-1].upper()
        #         filehandler.write('\t\ttypedef Eigen::' + solver + '< Eigen::SparseMatrix< ' + ', '.join(typedef) + ' > > ' + solver + 'Sparse' + obj + ';\n')
        coef = 2 if obj == 'Matrix' else 1
        if obj == 'RowVector':
            typedef.extend(['1'])
        typedef.extend(['Eigen::Dynamic'] * coef)
        if obj == 'Vector':
            typedef.extend(['1'])
        filehandler.write('\t\ttypedef Eigen::Matrix< ' + ', '.join(typedef) + ' > ' + obj + ';\n')
        if obj == 'Matrix':
            for solver in SOLVER:
                if solver in ['llt', 'ldlt']:
                    solver = solver.upper()
                else:
                    solver = solver[0].upper() + solver[1:]
                    if solver.endswith('Svd'):
                        solver = solver[:-3] + 'SVD'
                    else:
                        solver = solver[:-1] + solver[-1].upper()
                filehandler.write('\t\ttypedef Eigen::' + solver + '< Eigen::Matrix< ' + ', '.join(typedef) + ' > > ' + solver + obj + ';\n')
        filehandler.write('\n')
    filehandler.write('\t\ttypedef std::vector< Vector > Vectors;\n')
    filehandler.write('\t\ttypedef std::vector< RowVector > RowVectors;\n')
    filehandler.write('\t\ttypedef std::vector< SparseVector > SparseVectors;\n')
    filehandler.write('\t\ttypedef std::vector< Matrix > Matrices;\n\n')
    filehandler.write('\t\ttypedef std::vector< SparseMatrix > SparseMatrices;\n\n')

    filehandler.write('\t\tSTATISKIT_LINALG_API Vector solve(const Matrix& A, const Vector& b, const solver_type& solver);\n')
    # filehandler.write('\t\tSTATISKIT_LINALG_API Vector solve(const SparseMatrix& A, const Vector& b, const sparse_solver_type& solver);\n')
    filehandler.write('\t\tSTATISKIT_LINALG_API Matrix solve(const Matrix& A, const Matrix& b, const solver_type& solver);\n')
    filehandler.write('\t\tSTATISKIT_LINALG_API Matrix inverse(const Matrix& A, const solver_type& solver);\n')
    # filehandler.write('\t\tSTATISKIT_LINALG_API Matrix inverse(const SparseMatrix& A, const sparse_solver_type& solver);\n')
    filehandler.write('\t}\n}\n\n#endif')

with open('Eigen.cpp', 'w') as filehandler:
    filehandler.write('#include "Eigen.h"\n\n')
    filehandler.write('namespace statiskit \n{\n')
    filehandler.write('\tnamespace linalg \n\t{\n')
    for obj in ['Matrix', 'Vector']:
        filehandler.write('\n\t\t' + obj + ' solve(const Matrix& A, const ' + obj + '& b, const solver_type& solver)\n')
        filehandler.write('\t\t{\n')
        filehandler.write('\t\t\t' + obj + ' x;\n')
        filehandler.write('\t\t\tswitch(solver)\n\t\t\t{\n')
        for solver in SOLVER:
            filehandler.write('\t\t\t\tcase ' + solver + ':\n')
            if solver == 'jacobiSvd':
                filehandler.write('\t\t\t\t\tx = A.' + solver + '(Eigen::ComputeThinU | Eigen::ComputeThinV).solve(b);\n')
            else:
                filehandler.write('\t\t\t\t\tx = A.' + solver + '().solve(b);\n')
            filehandler.write('\t\t\t\t\tbreak;\n')
        filehandler.write('\t\t\t}\n\t\t\treturn x;\n')
        filehandler.write('\t\t}\n')
        if obj == 'Matrix':
            # filehandler.write('\n\t\t' + obj + ' solve(const SparseMatrix& A, const ' + obj + '& b, const sparse_solver_type& solver)\n')
            # filehandler.write('\t\t{\n')
            # filehandler.write('\t\t\t' + obj + ' x;\n')
            # filehandler.write('\t\t\tswitch(solver)\n\t\t\t{\n')
            # for solver in SPARSE_SOLVER:
            #     filehandler.write('\t\t\t\tcase ' + solver + ':\n')
            #     filehandler.write('\t\t\t\t\tx = A.' + solver + '().solve(b);\n')
            #     filehandler.write('\t\t\t\t\tbreak;\n')
            # filehandler.write('\t\t\t}\n\t\t\treturn x;\n')
            # filehandler.write('\t\t}\n')
            filehandler.write('\n\t\t' + obj + ' inverse(const Matrix& A, const solver_type& solver)\n')
            filehandler.write('\t\t{\n')
            filehandler.write('\t\t\t' + obj + ' B, I = Eigen::VectorXd::Ones(A.rows()).asDiagonal();\n')
            filehandler.write('\t\t\tswitch(solver)\n\t\t\t{\n')
            for solver in SOLVER:
                filehandler.write('\t\t\t\tcase ' + solver + ':\n')
                if solver == 'jacobiSvd':
                    filehandler.write('\t\t\t\t\tB = A.' + solver + '(Eigen::ComputeThinU | Eigen::ComputeThinV).solve(I);\n')
                else:
                    filehandler.write('\t\t\t\t\tB = A.' + solver + '().solve(I);\n')
                filehandler.write('\t\t\t\t\tbreak;\n')
            filehandler.write('\t\t\t}\n\t\t\treturn B;\n')
            filehandler.write('\t\t}\n')
            # filehandler.write('\n\t\t' + obj + ' inverse(const SparseMatrix& A, const sparse_solver_type& solver)\n')
            # filehandler.write('\t\t{\n')
            # filehandler.write('\t\t\t' + obj + ' B, I = Eigen::VectorXd::Ones(A.rows()).asDiagonal();\n')
            # filehandler.write('\t\t\tswitch(solver)\n\t\t\t{\n')
            # for solver in SPARSE_SOLVER:
            #     filehandler.write('\t\t\t\tcase ' + solver + ':\n')
            #     filehandler.write('\t\t\t\t\tB = A.' + solver + '().solve(I);\n')
            #     filehandler.write('\t\t\t\t\tbreak;\n')
            # filehandler.write('\t\t\t}\n\t\t\treturn B;\n')
            # filehandler.write('\t\t}\n')
    filehandler.write('\t}\n}')

from SCons.Errors import EnvironmentError

Import("env")

cppenv = env.Clone(tools = ['cpp'])

cppenv.AppendUnique(CPPDEFINES = ['LIBSTATISKIT_LINALG'])


exclude = """
""".split()

sources = [source for source in cppenv.Glob('*.h*') if not source.name in exclude]
targets = cppenv.CppDev(["statiskit", "linalg"], sources)
Alias("cpp-dev", targets)
Alias("cpp", targets)
Alias("autowig", targets)
Alias("install", targets)
try:
    wigenv = cppenv.Clone(tools = ['wig'])

    targets = wigenv.BoostPythonWIG('statiskit_linalg', [target for target in targets if target.name.endswith('.h')],
                                    module='../py/wrapper/_linalg.cpp',
                                    decorator='../py/statiskit/linalg/_linalg.py',
                                    parser_bootstrap=1,
                                    controller='AutoWIG.py',
                                    generator='AutoWIG.py',
                                    depends=[])
    Alias("autowig", targets)
    wigenv.Depends(targets, "cpp-dev")
except EnvironmentError:
    Alias("autowig", [])
    pass
except Exception:
    raise

exclude = """
""".split()

sources = [source for source in cppenv.Glob('*.cpp') if not source.name in exclude]
targets = cppenv.CppLib("statiskit_linalg", sources)
Alias("cpp-lib", targets)
Alias("cpp", targets)
Alias("install", targets)